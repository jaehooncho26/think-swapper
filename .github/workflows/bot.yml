name: GalaDEX Bot

on:
  schedule:
    - cron: '*/15 * * * *'   # every 15 minutes (UTC)
  workflow_dispatch:

permissions:
  contents: read

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    concurrency:
      group: galadex-bot
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Init project & install deps
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm i @gala-chain/gswap-sdk dotenv

      - name: Write bot.js
        run: |
          cat > bot.js <<'EOF'
require('dotenv').config();
const { GSwap, PrivateKeySigner } = require('@gala-chain/gswap-sdk');

const CLASS = {
  GALA:  'GALA|Unit|none|none',
  GUSDC: 'GUSDC|Unit|none|none',
  GWETH: 'GWETH|Unit|none|none',
};

const WALLET       = (process.env.WALLET_ADDRESS || '').trim();        // e.g. eth|0xabc...
const PRIVATE_KEY  = (process.env.PRIVATE_KEY || '').trim();
const DRY_RUN      = (process.env.DRY_RUN || 'true').toLowerCase() === 'true';
const PAIR         = (process.env.PAIR || 'GALA-GUSDC').toUpperCase(); // 'GALA-GUSDC' | 'GWETH-GUSDC'
const DIRECTION    = (process.env.DIRECTION || 'SELL').toUpperCase();  // SELL = token0->token1, BUY = token1->token0
const USD_SIZE     = Number(process.env.USD_SIZE || 1);                // USD notional per run
const SLIPPAGE_BPS = Number(process.env.SLIPPAGE_BPS || 200);          // 200 = 2%

if (!WALLET) throw new Error('WALLET_ADDRESS missing');
if (!DRY_RUN && !PRIVATE_KEY) throw new Error('PRIVATE_KEY missing and DRY_RUN=false');

function bpsMul(x, bps){ const n=Number(x); return ((n*(10000-bps))/10000).toString(); }
function pickTokens(pair, dir){
  const [a,b]=pair.split('-');
  if (!CLASS[a] || !CLASS[b]) throw new Error('Unsupported PAIR');
  if (dir==='SELL') return { tokenIn: CLASS[a], tokenOut: CLASS[b], inSymbol:a, outSymbol:b };
  if (dir==='BUY')  return { tokenIn: CLASS[b], tokenOut: CLASS[a], inSymbol:b, outSymbol:a };
  throw new Error('DIRECTION must be SELL or BUY');
}

async function dollarsToToken(usd, sym, gswap){
  if (sym==='GUSDC') return String(usd);
  const q = await gswap.quoting.quoteExactInput(CLASS[sym], CLASS.GUSDC, '1');
  const px = Number(q.outTokenAmount);
  if (!px || px<=0) throw new Error(`No price for ${sym}`);
  return (usd/px).toString();
}

(async()=>{
  const { tokenIn, tokenOut, inSymbol } = pickTokens(PAIR, DIRECTION);

  const gswap = new GSwap({
    signer: new PrivateKeySigner(PRIVATE_KEY || '0x'),
    walletAddress: WALLET,
    gatewayBaseUrl: process.env.GATEWAY_BASE_URL,
    bundlerBaseUrl: process.env.BUNDLER_BASE_URL,
    dexBackendBaseUrl: process.env.DEX_BACKEND_BASE_URL,
  });

  // size input from USD
  const amountIn = await dollarsToToken(USD_SIZE, inSymbol, gswap);

  // quote
  const q = await gswap.quoting.quoteExactInput(tokenIn, tokenOut, amountIn);
  const minOut = bpsMul(String(q.outTokenAmount), SLIPPAGE_BPS);
  console.log('Plan', JSON.stringify({ DRY_RUN, PAIR, DIRECTION, USD_SIZE, amountIn, expectedOut: q.outTokenAmount, minOut, feeTier: q.feeTier }));

  if (DRY_RUN) {
    console.log('DRY RUN → no swap executed');
    return;
  }

  const pending = await gswap.swaps.swap(
    tokenIn, tokenOut, q.feeTier,
    { exactIn: amountIn, amountOutMinimum: minOut },
    WALLET
  );

  const receipt = await pending.wait();
  console.log('✅ Swap confirmed', JSON.stringify({ txId: receipt.txId, hash: receipt.transactionHash }));
})().catch(e=>{
  console.error('❌ Bot error:', e?.stack || e?.message || String(e));
  process.exit(1);
});
EOF

      - name: Env sanity (no secrets leaked)
        env:
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          PRIVATE_KEY:    ${{ secrets.PRIVATE_KEY }}
          DRY_RUN:        'true'        # set 'false' to actually trade
          PAIR:           'GALA-GUSDC'  # or 'GWETH-GUSDC'
          DIRECTION:      'SELL'        # SELL or BUY
          USD_SIZE:       '1'           # start tiny; raise later
          SLIPPAGE_BPS:   '200'
        run: |
          echo "PAIR=${PAIR} DIRECTION=${DIRECTION} USD_SIZE=${USD_SIZE} SLIPPAGE_BPS=${SLIPPAGE_BPS} DRY_RUN=${DRY_RUN}"
          echo "WALLET_ADDRESS prefix: ${WALLET_ADDRESS:0:10}..."
          test -n "$PRIVATE_KEY" && echo "PRIVATE_KEY present: yes" || echo "PRIVATE_KEY present: no"

      - name: Run bot once
        env:
          WALLET_ADDRESS: ${{ secrets.WALLET_ADDRESS }}
          PRIVATE_KEY:    ${{ secrets.PRIVATE_KEY }}
          DRY_RUN:        'true'        # flip to 'false' when ready
          PAIR:           'GALA-GUSDC'  # or 'GWETH-GUSDC'
          DIRECTION:      'SELL'        # or 'BUY'
          USD_SIZE:       '1'
          SLIPPAGE_BPS:   '200'
        run: node bot.js
